Given the root of a binary tree, return the sum of values of its deepest leaves.
 
 7,null,null,null,null,8]
Output: 15
Example 2:

Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
Output: 19
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
//step 1 find the heigth of the tree
// step 2.. if height of a node is equal to that max height ..add it into our result..
class Solution {
    public int deepestLeavesSum(TreeNode root) {
        int max = height(root);
         return dfs(root, 1, max);
    }
    
    int height(TreeNode root){
        if(root ==null) return 0;
        return Math.max(height(root.left), height(root.right))+1;
    }
    int dfs(TreeNode root, int cur, int max){
        //base case
        if(root == null){
            return 0;
        }
        if(cur == max){
            return root.val;
        }
        int left = dfs(root.left, cur+1,max);
        int right = dfs(root.right,cur+1,max);
        return left+right;
    }    
}
