Given a grid of dimension nxm where each cell in the grid can have values 0, 1 or 2 which has the following meaning:
0 : Empty cell
1 : Cells have fresh oranges
2 : Cells have rotten oranges

We have to determine what is the minimum time required to rot all oranges. A rotten orange at index [i,j] can rot other fresh orange at indexes [i-1,j], [i+1,j], [i,j-1], [i,j+1] (up, down, left and right) in unit time. 
 

Example 1:

Input: grid = {{0,1,2},{0,1,2},{2,1,1}}
Output: 1
Explanation: The grid is-
0 1 2
0 1 2
2 1 1
Oranges at positions (0,2), (1,2), (2,0)
will rot oranges at (0,1), (1,1), (2,2) and 
(2,1) in unit time.
Example 2:

Input: grid = {{2,2,0,1}}
Output: -1
Explanation: The grid is-
2 2 0 1
Oranges at (0,0) and (0,1) can't rot orange at
(0,3).
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution
{
    class Pair{
        int i;
        int j;
        Pair(int i, int j){
            this.i = i;
            this.j = j;
        }
    }
     
    int[] dx={0,0,1,-1};
    int[] dy={1,-1,0,0};
    
    //Function to find minimum time required to rot all oranges. 
    public int orangesRotting(int[][] g)
    {
        int r = g.length;
        int c = g[0].length;
        Queue<Pair> q = new LinkedList<>();
        // step 1 --> to add all 2's 
        for(int i=0;i<g.length;i++){
            for(int j=0;j<g[0].length;j++){
                if(g[i][j]==2){
                   q.add(new Pair(i,j));            
                }
            }
        }
        int count=0;
        while(q.size()!=0){
            boolean flag = false;
            int siz = q.size();//size of queue when only  2's are present.
            for(int k=0;k<siz;k++){
            Pair temp = q.remove();
            int i= temp.i;
            int j=temp.j;
            //this loop is for covering 4 directions.
            for(int z =0;z<4;z++){
                if(isValid(g,r,c,i+dx[z],j+dy[z])){
                    flag =true;
                    q.add(new Pair(i+dx[z],j+dy[z]));
                    g[i+dx[z]][j+dy[z]] =2;
                }
            }
            }
            if(flag ==true){
                count++;
            }
        }
        for(int i=0;i<g.length;i++){
            for(int j=0;j<g[0].length;j++){
                if(g[i][j]==1){
                    return -1;
                }
            }
        }
        
        return count;
    }
    boolean isValid(int g[][], int r ,int c ,int x, int y){
        if(x>=r || y>=c|| x<0||y<0||g[x][y]==2||g[x][y]==0){
            return false;
        }
        return true;
    }
}
