
Given two strings A and B. Find minimum number of times A has to be repeated such that B is a Substring of it. If B can never be a substring then return -1.

 

Input:
A = "abcd"
B = "cdabcdab"
Output:
3
Explanation:
Repeating A three times (“abcdabcdabcd”),
B is a substring of it. B is not a substring
of A when it is repeated less than 3 times.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
    static int minRepeats(String A, String B) {
       
        String a ="";
        a+=A;
        int c =1;
        while(!a.contains(B)){
            a+=A;
            c++;
            if(a.length()>(2*B.length())){
                return -1;
            }
        }
        return c;
    }
}
