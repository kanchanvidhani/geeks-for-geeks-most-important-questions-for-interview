You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m-1][n-1]). The robot can only move either down or right at any point in time.

An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.

Return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The testcases are generated so that the answer will be less than or equal to 2 * 109.

 

Example 1:


Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TOP DOWN DP :
class Solution {
   
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
         int m = obstacleGrid.length;
         int n = obstacleGrid[0].length;
    
        int[][] dp = new int[m][n];
        for(int i[] : dp)
             Arrays.fill(i, -1);
        return rec(0,0,obstacleGrid,dp);
    }
  public int rec(int cr,int cc, int[][] obstacleGrid,int [][] dp){
      if(cr>=obstacleGrid.length||cr<0||cc<0 || cc>=obstacleGrid[0].length||obstacleGrid[cr][cc]==1 ){
          return 0;
      }
     
      if(cr ==obstacleGrid.length-1 && cc==obstacleGrid[0].length-1 ){
          return 1;
      }
      if(dp[cr][cc]!=-1){
          return dp[cr][cc];
      }
      dp[cr][cc] =  rec(cr,cc+1,obstacleGrid,dp)+rec(cr+1,cc,obstacleGrid,dp);
    return rec(cr,cc+1,obstacleGrid,dp)+rec(cr+1,cc,obstacleGrid,dp);
     
  }
}
