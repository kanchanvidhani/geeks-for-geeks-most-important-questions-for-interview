You are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, causing the left and the right side of the deleted substring to concatenate together.

We repeatedly make k duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made. It is guaranteed that the answer is unique.

 

Example 1:

Input: s = "abcd", k = 2
Output: "abcd"
Explanation: There's nothing to delete.
Example 2:

Input: s = "deeedbbcccbdaa", k = 3
Output: "aa"
Explanation: 
First delete "eee" and "ccc", get "ddbbbdaa"
Then delete "bbb", get "dddaa"
Finally delete "ddd", get "aa"
Example 3:

Input: s = "pbbcggttciiippooaais", k = 2
Output: "ps"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
    class Node{
        char c;
        int fr;
      public Node(char c,int fr){
            this.c = c;
            this.fr = fr;
        }
    }
    public String removeDuplicates(String str, int k) {
        Stack<Node> s = new Stack<>();
         for(int i=0;i<str.length();i++){
             if(!s.isEmpty() && s.peek().c == str.charAt(i)){
               s.peek().fr++;
             }else{
               char cu = str.charAt(i);
                s.push(new Node(cu,1));//freq initialized with 1. 
             }
             if(s.peek().fr ==k){
                 s.pop();
             }
         }
        StringBuilder sb = new StringBuilder();
        for(Node node : s) {
            for(int j=0;j<node.fr;j++) {
                sb.append(node.c);
            }
        }
        return sb.toString();
    }
}
